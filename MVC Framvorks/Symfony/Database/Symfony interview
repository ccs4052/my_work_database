------------------
Стандартный пакет БАНДЛОВ которые входят в Symfony  при установке 

$bundles = [
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Symfony\Bundle\SecurityBundle\SecurityBundle(),
            new Symfony\Bundle\TwigBundle\TwigBundle(),
            new Symfony\Bundle\MonologBundle\MonologBundle(),
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),
            new AppBundle\AppBundle(),

        ];

        if (in_array($this->getEnvironment(), ['dev', 'test'], true)) {
            $bundles[] = new Symfony\Bundle\DebugBundle\DebugBundle();
            $bundles[] = new Symfony\Bundle\WebProfilerBundle\WebProfilerBundle();
            $bundles[] = new Sensio\Bundle\DistributionBundle\SensioDistributionBundle();
            $bundles[] = new Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle();
        }

----------------------------------        





1) Dependency injection

Компонент DependencyInjection позволяет стандартизировать и централизовать способ создания объектов в вашем приложении.

		НАПРИМЕР У НАС ЕСТЬ КЛАСС
			class Mailer
			{
			    private $transport;

			    public function __construct()
			    {
			        $this->transport = 'sendmail';
			    }

			    // ...
			}



	
		a) С помошью ContainerBuilder();

		use Symfony\Component\DependencyInjection\ContainerBuilder;

		$container = new ContainerBuilder();
		$container->setParameter('mailer.transport', 'sendmail'); // дали значение параметру transport класса mailer
		$container
				->register('mailer', 'Mailer');                   //зарегистрировали класс Mailer
		 		->addArgument('%mailer.transport%');



		далее в каком-то другом классе можно использовать зарегистрированый в контейнере класс

		use Symfony\Component\DependencyInjection\ContainerBuilder;
		$container = new ContainerBuilder();
		$newsletterManager = $container->get('mailer');



			Setting up the Container with Configuration Files
		b) 




		service.yml  регистрируем нужный класс 

						parameters:
							   
							    mailer.transport: sendmail

							services:
							    mailer:
							        class:     Mailer
							        arguments: ['%mailer.transport%']
							    newsletter_manager:
							        class:     NewsletterManager
							        calls:
							            - [setMailer, ['@mailer']]
		  		
		  	use Symfony\Component\DependencyInjection\ContainerBuilder;
			use Symfony\Component\Config\FileLocator;
			use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

			$container = new ContainerBuilder();
			$loader = new YamlFileLoader($container, new FileLocator(__DIR__));
			$loader->load('services.yml');



1.1) Service 
Классы заранее созданы

# app/config/services.yml
services:
    app.mailer:
        # ...

    app.newsletter_manager:
        class:     AppBundle\Newsletter\NewsletterManager
        calls:
            - [setMailer, ['@app.mailer']] //передаем экземпляр класса в метод setMailer


    //вызываем service
    $mailer = $this->get('app.mailer');
    $newsletter = $this->get('app.newsletter_manager');


2) Rest API Methods - Status Code
	(POST http://www.example.com/customers/12345/orders)
	1) POST  - Create - return 201 (false 404(Not Found) / 409 (Conflict for example if exist data))

	2) GET   - Read - 200 (false 404 (Not Found))

	3) PUT - Update/Replace - 200 (ok) (изменение полностью данных) 204(No Content) , 404 (Not Found)

	4) DELETE - Delete -  	200 (OK). 404 (Not Found), if ID not found or invalid.

	-PATCH - Update/Modify (изменение частями) - 200 (ok) 204(No Content) , 404 (Not Found)



	HEAD -  check if the resource exists or not -  A 200 means "yes" and a 404 means "no":


	respones code

	100 - Information
		100 - continue
		101 - switch protocol

	200 - Success
		204 - no content
		202 - accepted
		203 - Non-Authoritative Information

	300 - redirection
		300 - multiple choices
		301 - перемещено навсегда
		302 - перемещено временно или найдено

	400 - client error
		400 - Bad request
		403 - Forbidden (запрещен доступ)
		404 - not Found
		402 - Payment request
		429 - to many request

	500 - server error
		500 - internal server error


3) Bundle (комплект классов например doctrine-bundle) - > new Bundle need to be regist in app/AppKernel.php
	пример регистрации Пакета в файле AppKernel
	 new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),





	 




5) Tags services
--------------
ИСПОЛЬЗОВАНИЕ Service

services:
    app.mailer:
        class:        AppBundle\Mailer
        arguments:    [sendmail]

 //Вызываем сервис
 $mailer = $this->get('app.mailer');
 $mailer->send('ryan@foobar.net', ...);

 ---------------


 -------------------------
передаем экземпляр класса аргументов в service

services:
    app.mailer:
        # ...

    app.newsletter_manager:
        class:     AppBundle\Newsletter\NewsletterManager
        calls:
            - [setMailer, ['@app.mailer']]  //метод класса в который передаем экземпляр класса
 -------------------------


Все это работает в 3 этапа
	- Создаем КЛАСС
	- регистрируем его в service
	- используем

используються такие классы
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\Reference;


	В контейнере услуг, метка означает, что служба предназначена для конкретной цели

	# app/config/services.yml
	services:
	    foo.twig.extension:
	        class: AppBundle\Extension\FooExtension
	        public: false
	        tags:
	            -  { name: twig.extension }


	пример :
			a)Способ первый 
			-создаем класс

			namespace AppBundle\Mail;

			class TransportChain
			{
			    private $transports;

			    public function __construct()
			    {
			        $this->transports = array();
			    }

			    public function addTransport(\Swift_Transport $transport)
			    {
			        $this->transports[] = $transport;
			    }
			}

			-Регистрируем класс в service


			services:
			    app.mailer_transport_chain:
			        class: AppBundle\Mail\TransportChain

			b)Способ второй Define Services with a Custom Tag
				//Регистрируем 2 класса под одним именем tags (это код будем использовать в компиляторе)
				services:
				    app.smtp_transport:
				        class: \Swift_SmtpTransport
				        arguments: ['%mailer_host%']
				        tags:
				            -  { name: app.mail_transport }

				    app.sendmail_transport:
				        class: \Swift_SendmailTransport
				        tags:
				            -  { name: app.mail_transport }


			с) Create a Compiler Pass (Используем компилер для использования классов зарегистрированніх в servie)


			class Test implement Test {

				 public function process(ContainerBuilder $container)
				    {
				    	//находим service в первом примере
				        // always first check if the primary service is defined
				        if (!$container->has('app.mailer_transport_chain')) {
				            return;
				        }
				        //вызыаем servie в первом примере
				        $definition = $container->findDefinition('app.mailer_transport_chain');

				        // find all service IDs with the app.mail_transport tag
				        //находим все service во втором примере - по скольку их 2 на одно имя foreach перебирает все service на это имя
				        $taggedServices = $container->findTaggedServiceIds('app.mail_transport');

				        foreach ($taggedServices as $id => $tags) {
				            // add the transport service to the ChainTransport service
				            $definition->addMethodCall('addTransport', array(new Reference($id)));
				        }
				    }
			}

			Добавление дополнительных атрибутов в TAGS



			class TransportChain
				{
				    private $transports;

				    public function __construct()
				    {
				        $this->transports = array();
				    }
				    //В парметрах передаем 2 аргумента объект и переменную
				    //нужно добавить изменения и в service
				    public function addTransport(\Swift_Transport $transport, $alias)
				    {
				        $this->transports[$alias] = $transport;
				    }

				    public function getTransport($alias)
				    {
				        if (array_key_exists($alias, $this->transports)) {
				            return $this->transports[$alias];
				        }
				    }
				}

			Добавляем класс в service

			services:
			    app.smtp_transport:
			        class: \Swift_SmtpTransport
			        arguments: ['%mailer_host%']
			        tags:
			            -  { name: app.mail_transport, alias: foo }

			    app.sendmail_transport:
			        class: \Swift_SendmailTransport
			        tags:
			            -  { name: app.mail_transport, alias: bar }


			Create compiler class 

				use Symfony\Component\DependencyInjection\ContainerBuilder;
				use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
				use Symfony\Component\DependencyInjection\Reference;

				class TransportCompilerPass implements CompilerPassInterface
				{
				    public function process(ContainerBuilder $container)
				    {
				        if (!$container->hasDefinition('app.mailer_transport_chain')) {
				            return;
				        }

				        $definition = $container->getDefinition('app.mailer_transport_chain');
				        $taggedServices = $container->findTaggedServiceIds('app.mail_transport');

				        foreach ($taggedServices as $id => $tags) {
				            foreach ($tags as $attributes) {
				                $definition->addMethodCall('addTransport', array(
				                    new Reference($id),
				                    $attributes["alias"]
				                ));
				            }
				        }
				    }
				}


6) Migration Bundle (возможность программно развернуть новые версии схемы базы данных безопасным, простым путем)

	-установка composer require doctrine/doctrine-migrations-bundle "^1.0"

	- далее регистрируем новый класс в AppKernel.php

	a) Config Migration

	# app/config/config.yml
		doctrine_migrations:
		    dir_name: "%kernel.root_dir%/DoctrineMigrations"
		    namespace: Application\Migrations
		    table_name: migration_versions
		    name: Application Migrations

	b) php bin/console doctrine:migrations:status - проверяем статус миграции

	c) php bin/console doctrine:migrations:generate  - generate new migration
	d) php bin/console doctrine:migrations:status     --show-versions of new migration

	e) php bin/console doctrine:migrations:migrate 20100621140655 (цыфры номер миграции виден когда делаем status)


7) Entity  (Config BD находиться в файле parameters.yml)

			-создание базыданных- php bin/console doctrine:database:create

			-Создание таблици  - php bin/console doctrine:generate:entity

			-Добавление созданой таблици в базу данных - php bin/console doctrine:schema:update --force

			- Создать все гетеры и сетеры для Entity - 	php bin/console doctrine:generate:entities AppBundle/Entity/Product


				ПРИМЕР 

				/**
				 * @ORM\Entity
				 * @ORM\Table(name="product")
				 */
				class Product
				{
				    /**
				     * @ORM\Column(type="integer")
				     * @ORM\Id
				     * @ORM\GeneratedValue(strategy="AUTO")
				     */
				    private $id;

				    /**
				     * @ORM\Column(type="string", length=100)
				     */
				    private $name;

				    /**
				     * @ORM\Column(type="decimal", scale=2)
				     */
				    private $price;
				}
	

    //пример
 	$product = new Product();
    $product->setName('Keyboard');
    $product->setPrice(19.99);
    $product->setDescription('Ergonomic and stylish!');

    $em = $this->getDoctrine()->getManager();
    // tells Doctrine you want to (eventually) save the Product (no queries yet)
    $em->persist($product);
    // actually executes the queries (i.e. the INSERT query)
    $em->flush();


    //отображаем объект 

      $product = $this->getDoctrine()
        ->getRepository('AppBundle:Product')
        ->find($productId);
        //display name
      $product->getName() //display name


      //inner join 
       $repository = $this->getDoctrine()
            ->getRepository('AppBundle:User')
            ->createQueryBuilder('e')
            ->select('e.id,e.username,co.name')
            ->leftJoin('AppBundle:Country', 'co', 'WITH', 'co.id = e.country')
            ->getQuery()
            ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        echo '<pre>';
        print_r($repository);
        echo '</pre>';


         return $this->render('default/test.html.twig', array(
                'data' => $repository,
               
         ));
        Отобраджение данных в twig
        {% for key, value in data %} 
		    <p>{{ value }} : {{ key }}</p>
		{% endfor %}


		DELETE

		$em->remove($product);
		$em->flush();

			-DQL
		$em = $this->getDoctrine()->getManager();
		$query = $em->createQuery(
		    'SELECT p
		    FROM AppBundle:Product p
		    WHERE p.price > :price
		    ORDER BY p.price ASC'
		)->setParameter('price', 19.99);

		$products = $query->getResult();

		---query builder

		$repository = $this->getDoctrine()
		    ->getRepository('AppBundle:Product');

		// createQueryBuilder automatically selects FROM AppBundle:Product
		// and aliases it to "p"
		$query = $repository->createQueryBuilder('p')
		    ->where('p.price > :price')
		    ->setParameter('price', '19.99')
		    ->orderBy('p.price', 'ASC')
		    ->getQuery();

		$products = $query->getResult();


---------------------------ПРИМЕР ЗАПРОСОВ ОРМ
$repository = $this->getDoctrine()->getRepository('AppBundle:Product');

// query for a single product by its primary key (usually "id")
$product = $repository->find($productId);

// dynamic method names to find a single product based on a column value
$product = $repository->findOneById($productId);
$product = $repository->findOneByName('Keyboard');

// dynamic method names to find a group of products based on a column value
$products = $repository->findByPrice(19.99);

// find *all* products
$products = $repository->findAll();
----------------------------



----------------Entity Relation
Связб продукта с категорией

// src/AppBundle/Entity/Product.php

// ...
class Product
{
    // ...

    /**
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="products")
     * @ORM\JoinColumn(name="category_id", referencedColumnName="id")
     */
    private $category;
}


// src/AppBundle/Entity/Category.php

// ...
use Doctrine\Common\Collections\ArrayCollection;

class Category
{
    // ...

    /**
     * @ORM\OneToMany(targetEntity="Product", mappedBy="category")
     */
    private $products;

    public function __construct()
    {
        $this->products = new ArrayCollection();
    }
}

Запрос
$product = $this->getDoctrine()
        ->getRepository('AppBundle:Product')
        ->find($productId);

    $categoryName = $product->getCategory()->getName();



8) MongoDB (Объектно ориентирования BD)
 mongodb попадает в группу документно-ориентированных nosql баз данных.
//connection
 $connecting_string =  sprintf('mongodb://%s:%d/%s', $hosts, $port,$database),
$connection=  new Mongo($connecting_string,array('username'=>$username,'password'=>$password));

//select Db
$dbname = $connection->selectDB('dbname');
//create DB
$collection = $dbname->collection;

//create collection posts
$posts = $dbname->posts

$post = array(
        'title'     => 'What is MongoDB',
        'content'   => 'MongoDB is a document database that provides high performance...',
        'saved_at'  => new MongoDate() 
    );
  //save ata in collection posts  
 $posts->insert($post);



 	READ DATA

 		 // all records
	    $result = $posts::find();
	    // one record
	    $id = '52d68c93cf5dc944128b4567';
	    $results = $posts::findOne(array('_id' => new MongoId($id)));



9) Query Builder 

		 $em = $this->getDoctrine()->getManager();

	        $qb = $em->createQueryBuilder();

	        $qb->select('u')
	            ->from('User', 'u')
	            ->orderBy('u.name', 'ASC');


	        $query = $qb->getQuery();
	        $result = $query->getResult();


	      --  helper for building expressions. This class is called Expr (Class hekper for query builder)

	      	$qb->add('select', new Expr\Select(array('u')))
		   ->add('from', new Expr\From('User', 'u'))
		   ->add('where', $qb->expr()->orX(
		       $qb->expr()->eq('u.id', '?1'),
		       $qb->expr()->like('u.nickname', '?2')
		   ))
		   ->add('orderBy', new Expr\OrderBy('u.name', 'ASC'));




11) Table Inheritance (Все классы иерархии представлены в одной или нескольких таблицах)
http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/inheritance-mapping.html
	ТИПЫ Наследования Таблиц :
		-SINGLE_TABLE - все классы иерархии представлены в одной таблице
		-JOINED - каждый класс отображаеться в нескольких таблицах

	- Для того что-бы понять какая строка представляет, какой тип в иерархии нужно в Анотации использовать  @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})

		<?php
		namespace MyProject\Model;

		/**
		 * @Entity
		 * @InheritanceType("SINGLE_TABLE")                                   // тип наследования таблиц (ОДИНОЧНЫЙ)
		 * @DiscriminatorColumn(name="discr", type="string")
		 * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})  // все класы которые используются в иерархии должны быть перечислены сдесь
		 */
		class Person
		{
		    // ...
		}

		/**
		 * @Entity
		 */
		class Employee extends Person //Сушность наследует класс
		{
		    // ...
		}


		// должны быть указаны в аннотации верхнего класса КОТОРЫЙ ЯВЛЯЕТЬСЯ ЧАСТЬЮ САПОСТОВЛЕНИЯ ИЕРАРХИИ СУЩНОСТИ
		 * @InheritanceType("SINGLE_TABLE")                                   
		 * @DiscriminatorColumn(name="discr", type="string")

		 -------ЛУЧЬШЕ ПРИМЕР 

		 /**
			 * This class represents a LabLog item, either a BlogPost or an Event.
			 * It is abstract because we never have a LabLog entity, it's either an event or a blog post.
			 * @ORMEntity
			 * @ORMTable(name="lablog")
			 * @ORMInheritanceType("SINGLE_TABLE")
			 * @ORMDiscriminatorColumn(name="type", type="string")
			 * @ORMDiscriminatorMap( {"event" = "Event", "blogpost" = "BlogPost"} )
			 */
			abstract class Event
			{
			    /**
			     * @ORMId
			     * @ORMColumn(type="integer")
			     * @ORMGeneratedValue(strategy="AUTO")
			     */
			    protected $id;
			 
			    /**
			     * @ORMColumn(type="date")
			     */
			    protected $date;
			 
			    /**
			     * @ORMColumn(type="string")
			     */
			    protected $title;
			 
			    /**
			     * @ORMColumn(type="text")
			     */
			    protected $description;
			 
			    /***** Getters and setters *****/
			 
			    public function getId()
			    {
			        return $this->id;
			    }
			 
			    public function setDate($date)
			    {
			        $this->date = $date;
			    }
			 
			    public function getDate()
			    {
			        return $this->date;
			    }
			 
			    // And so on...
			}


			/**
			 * Represent a blog post item.
			 * Note that this class extends LabLogItem
			 */
			class BlogPost extends Event
			{
			    /**
			     * @ORMColumn(type="text")
			     */
			    protected $content;
			 
			    /***** Getters and setters *****/
			 
			    public function getContent()
			    {
			        return $this->content;
			    }
			 
			    public function setContent($content)
			    {
			        $this->content = $content;
			    }
			}





12) Создание форм  FORM Create


//create form
        $form = $this->createFormBuilder($user)

            ->add('username', TextType::class,array(
                'required' => true,
                'attr' => array(
                    'maxlength' => 4,
                    'class' => 'form-control'
                )
            ))

            ->add('email', EmailType::class,array(
                'required' => true,
                'attr' => array(
                    'maxlength' => 30,
                    'class' => 'form-control'
                )
            ))
            ->add('country', ChoiceType::class, array(
                'choices' => $sort_country//$country

            ))
            ->add('password', PasswordType::class,array(
                'required' => true,
                'attr' => array(
                    'maxlength' => 20,
                    'class' => 'form-control'
                )
            ))
            ->add('save', SubmitType::class, array('label' => 'Create Task'))
            ->getForm();
        $form->handleRequest($request);
        $validator = $this->get('validator');
        $errors = $validator->validate($user);


            return $this->render('default/test.html.twig', array(
                'reg_form' => $form->createView(),
                'errors' => $errors
            ));


            ------in view

             {% if reg_form  %}
		        {{ form_start(reg_form) }}
		        <div class="form-group">
		            {{ form_label(reg_form.username) }}
		            {{ form_errors(reg_form.username) }}
		            {{ form_widget(reg_form.username) }}
		        </div>
		        <div class="form-group">
		            {{ form_label(reg_form.email) }}
		            {{ form_errors(reg_form.email) }}
		            {{ form_widget(reg_form.email) }}
		        </div>
		        <div class="form-group">
		            {{ form_label(reg_form.country) }}
		            {{ form_errors(reg_form.country) }}
		            {{ form_widget(reg_form.country) }}
		        </div>
		        <div class="form-group">
		            {{ form_label(reg_form.password) }}
		            {{ form_errors(reg_form.password) }}
		            {{ form_widget(reg_form.password) }}
		        </div>
		        <div class="form-group">

		            {{ form_widget(reg_form.save) }}
		        </div>
		        {{ form_end(reg_form) }}
		    {% endif %}




13) Authorization   (security.yml)

security:

    encoders:   #user password encoding
                AppBundle\Entity\User:
                          algorithm: bcrypt
                          cost: 12

    providers:
        our_db_provider:
                    entity:
                        class: AppBundle:User
                        property: username
                        # if you're using multiple entity managers
                        # manager_name: customer




    firewalls:
     
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            anonymous: ~
            #user login and logout config
            form_login:
                            login_path: login
                            check_path: login
            logout:
                        path:   logout
                        target: _homepage
            provider: our_db_provider

    access_control:
                                   - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

          

  --------Создаем контролер который будет иметь определенные роутинги для авторизации 
  
  /**
     * @Route("/login", name="login")
     */
    public function loginAction(Request $request)
    {


		$authenticationUtils = $this->get('security.authentication_utils');

		// get the login error if there is one
		$error = $authenticationUtils->getLastAuthenticationError();

		// last username entered by the user
		$lastUsername = $authenticationUtils->getLastUsername();

		return $this->render('security/login.html.twig', array(
			'last_username' => $lastUsername,
			'error'         => $error,
		));


    }


    /**
     * @Route("/logout", name="logout")
     */
    public function logoutAction() //logout actiov -> symfony core method
    {

    }        



    -------------Проверяем права пользователя вот таким образом 

      $authorizationChecker = $this->get('security.authorization_checker');

        // check for auth user access
        if (false === $authorizationChecker->isGranted('ROLE_USER')) {
            //throw new AccessDeniedException();
            $request->getSession()
                ->getFlashBag()
                ->add('error', 'You have no permission!')
            ;
            return $this->redirectToRoute('_homepage');
        }

        //check if user login

        $securityContext = $this->container->get('security.authorization_checker');
        if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            $user = $this->getUser();
           // echo $user->getId();
        }





14) Event Listener (Ваше приложение может слушать эти уведомления и отвечать на них, выполнять любую часть кода.)

Например создадим класс который будет ловит Exeptional

// src/AppBundle/EventListener/ExceptionListener.php
namespace AppBundle\EventListener;

use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

class ExceptionListener
{
    public function onKernelException(GetResponseForExceptionEvent $event)
    {
        // You get the exception object from the received event
        $exception = $event->getException();
        $message = sprintf(
            'My Error says: %s with code: %s',
            $exception->getMessage(),
            $exception->getCode()
        );

        // Customize your response object to display the exception details
        $response = new Response();
        $response->setContent($message);

        // HttpExceptionInterface is a special type of exception that
        // holds status code and header details
        if ($exception instanceof HttpExceptionInterface) {
            $response->setStatusCode($exception->getStatusCode());
            $response->headers->replace($exception->getHeaders());
        } else {
            $response->setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);
        }

        // Send the modified response object to the event
        $event->setResponse($response);
    }
}

- РЕГИСТРИРУЕМ КЛАСС В Services

# app/config/services.yml
services:
    app.exception_listener:
        class: AppBundle\EventListener\ExceptionListener
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }     //название метода класса который будет вызываться автоматически


- Теперь класс отлавливание exeption работает автоматически








16) Mysql Transaction 

mysql_query("START TRANSACTION");

$a1 = mysql_query("INSERT INTO rarara (l_id) VALUES('1')");
$a2 = mysql_query("INSERT INTO rarara (l_id) VALUES('2')");

if ($a1 and $a2) {
    mysql_query("COMMIT");
} else {        
    mysql_query("ROLLBACK");
}




INSERT INTO table_name (column1,column2,column3,...)
VALUES (value1,value2,value3,...);


UPDATE table_name
SET column1=value, column2=value2,...
WHERE some_column=some_value 


17) ПРОСТО ПОЛЕЗНЫЕ ВЕЩИ
1) Base path 


	array(
            'base_dir' => realpath($this->container->getParameter('kernel.root_dir').'/..').DIRECTORY_SEPARATOR,
        )





 2)  Check if user login 

 		 $securityContext = $this->container->get('security.authorization_checker');
        if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            $user = $this->getUser();
            echo $user->getId();
        }



 3) Получить данные залогиневшегося юзера 

 		$user = $this->getUser();
        echo $user->getId();


        в TWIG - не передавая аргументы из Контролера

         <p>user id = {{ app.user.id }}</p>
   		 <p>user name = {{ app.user.username }}</p>


  4) Цикл из объекта в twig 

  

		  {% for article in prevArticles %}

		   {{ article.top_logo_advert }}

		{% endfor %}


---------------
18) TWIG

Template

<body>
{% block header %}

      
{% endblock %}
<div class="row">
    <div style="margin: 0 auto;float: none" class="col-xs-6">
        {% block widget %}{% endblock %}
    </div>
</div>


{% block body %}{% endblock %}


{% block javascripts %}{% endblock %}
</body>
</html>

----------------------------------


//используем template 
{% extends 'app.php.twig' %}

{% block widget %}
        <h1>{{ page_title }}</h1>

        <ul id="navigation">
            {% for item in navigation %}
                <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
            {% endfor %}
        </ul>

{% endblock %}

{% block body %}
	
		//Если Юзер залогинился можно сразу испольховать его данные в виде не передавая аргументя из контролера
		 {% if  app.user.id  %}
 		    <p>user id = {{ app.user.id }}</p>   
   			 <p>user name = {{ app.user.username }}</p>
   		 {% endif %}>

{% endblock %}






------------------------ОТВЕТ ПО РЕЗЮМЕ
	1) Weclip               (Портал для загрузки видео ,управление библиотекой, публикация и обменом видео )

	Мой последний проект Weclip  (продолжительность 10 месяцев Singapur) 
		back-end developer,
		API developer.
		back-end architect

		PHP, Symfony 2, AngularJS, Google oAuth, YouTube API, Dailymotion API, Wordpress, HTML, SCSS.

	Проект Weclip является информационным порталом для видео, управления библиотекой, продвижения, публикации и обмена видео на несколько платформ. Пользователь может загрузить свое видео и организовать публикации в самых популярных социальных сетях. Weclip станет площадкой для интеграции бренда на YouTube, Лоза, Instagram, Twitter и других соцсетях.

	2) Api for web-application ( 10 месяцев USA) (показывало близкие города с их текущей погодой - накладывание верстки на картинку и отдавали с Бекенда)
	PHP, Symfony 2, PostgreSQL, ffmpeg,Doctrine

	В данном проекте была реализована поддержка gmaps, достаточно расчетов на стороне сервера с помощью пакета сервис postgre SQL-кода. Обработки изображений(масштабирование, обрезка, добавление оверлея). Проект работает с очень высокой нагрузкой.

	3) Corporate site (3 месяца)  

		PHP, JavaScript, Symfony 2,Doctrine.

		Разработана серверной части корпоративного веб-сайта, которая позволяет управлять контентом.

	4) Online shop (8 month UA) 

		Создание интернет магазинов по продаже косметики. В symfony 2. Распределенная система с возможностью поддержки большого целевого трафика. И интеграции с большим количеством сторонних систем API

		PHP, Symfony 2, Doctrine, PayPal,Skrill,other payment systems ,delivery systems, google maps

	5) Music management system (3  UA)

		Создание соответствующих систем для онлайн воспроизведения, резервного копирования, его выход для художников, а также привязку клипов к композициям и отображается на экране с помощью внешнего устройства

		PHP, Codeigniter, MySQL, jQuery, HTTP


	6) SMS sending system (2 UA) ( Sending system gateway http://www.bulksms.com)

	Создание приложения для отправки SMS - сообщений, Формат, выбранный с загружаемыми списками и шаблонами.

	Codeigniter, JavaScript, MySQL




