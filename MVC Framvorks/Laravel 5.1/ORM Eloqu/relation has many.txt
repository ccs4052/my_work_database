

1) User

<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Auth\Passwords\CanResetPassword;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;
use Mfy\Role\Models\Role;


class User extends Authenticatable implements AuthenticatableContract, CanResetPasswordContract
{
    use Notifiable;
    use SoftDeletes;
    use CanResetPassword;

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];



    /**
     * Check if user has admin role.
     *
     * @return mixed
     */
    public function isAdmin($roles) {
        foreach ($roles as $role)
        {
            if ($role->role['name'] == 'admin')
            {
                return true;
            }
        }
        return false;
    }

    /**
     * returns role
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function role()
    {
        return $this->belongsTo(Role::class);
    }
}






USER Migration

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateUsersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('email')->unique();
            $table->integer('role_id')->unsigned();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();

            $table->foreign('role_id')
                ->references('id')
                ->on('role');

        });

        Schema::table('users', function ($table) {
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop('users');
    }
}












2) Role

<?php
namespace Mfy\Role\Models;

use Illuminate\Database\Eloquent\Model;
//use Jenssegers\Mongodb\Eloquent\Model as Eloquent;
use Mfy\Eloquent\Model as Eloquent;
use App\User;

class Role extends Eloquent
{
    protected $connection = 'mongodb';
    protected $collection = 'role';
    protected $table = 'role';
    protected $fillable = ['name'];
    protected $hidden = [];

    /**
     * returns customers
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function users()
    {
        return $this->hasMany(User::class);
    }

}



ROLE Migration

<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateRoleTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('role', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('role');
    }
}



--------Сохранение

Create role

	$role = new Role();
	$t = $role::create(array('name' => 'admin'));

Create user with role

	 $u = new User();
     $r = new Role();
     $user = $u::create(array('name' => 'tekskdfgtv','email' => 'bkdfgko@ram.ru','password' => bcrypt('111111')));
     //get role to add into user relation
     $role = Role::where('name','admin')->first();
     //save user with role
     $role->users()->save($user);

Get user with role

	 $user = User::where('email','bkdfgko@ram.ru')->first();
        echo '<pre>';
        print_r($user->role);
        echo '</pre>';
