http://learn.shayhowe.com/advanced-html-css/transitions-animations/ - полезные приколы анимации


transform: scale (1.2) - увеличение объекта при наведении мышкой

---Округлая форма картинки с бортиками <img class="rounded-img-wrap"
	.rounded-img-wrap {
		border-radius:10em
		border: 6px solid #55002
		overflow: hidden
		width:125px
		height:125px
		text-align: center
		margin: auto
	}

------------------------
------------------------ВСЕВДОКЛАССЫ CSS
:link
– отвечает за стили непосещенной ссылки;
:visited
– состояние посещенной ссылки;
:active
– состояние активного объекта;
:hover
 – состояние объекта при наведении на него мышкой;
:focus
 – фокус на объекте;
:first-child 
– первый дочерний элемент текущего элемента;
:last-child
 – последний дочерний элемент;
:only-child
 – применяет стиль к элементу, если он единственный дочерний элемент;
:nth-child(5)
 – в данном случае пятый по счету с начала дочерний элемент;
:nth-last-child(3) 
– аналогично, только отчет с конца. В этом, как и в предыдущих селекторах 
можно задавать не только конкретные цифры, но и писать, например, что-то типа такого: ul li:
nth-last-child(2n+1);
:root
 – дает указание применить стиль к корневому элементу (в html документе это тег 
<html>);

:not()
 – дает ограничение на применение стилей по селектору (то есть селектор .white-block:
not(div) применит указанный стиль ко всем элементам с классом .white-block, только есть этот 
элемент не <div>);
:empty
 – выбирает пустые элементы;
:first-of-type
 – применяет стиль к первому элементу этого типа, то есть если у вас есть два div, 
стиль будет работать только для первого из них;
:last-of-type
– аналогично предыдущему, только для последнего элемента;
:only-of-type 
– применяет стили к элементу, если он имеет уникальный тип внутри своего ро
-
дителя;
:nth-of-type()
 – выбирает указанный по счету с начала элемент текущего типа;
:nth-last-of-type()
 – тоже самое, но с конца;
:target
– например, если у вас адрес имеет вид index.html#anchor, то этот псевдокласс задаст пра
-
вило для элемента с id=”anchor”;
:enabled 
– выбирает активные инпуты;
:disabled
 – выбирает неактивные инпуты;
:checked
 – отмеченные чекбоксы и выбранные радиокнопки;
:default 
– элемент по умолчанию, например кнопка отправки формы;
:valid
 – стиль для правильного инпута (когда указана data type в HTML 5);
:invalid 
– когда, соответственно, инпут невалиден;
:in-range 
– когда значение инпута находиться в заданных границах (type=”range”, задан min и 
max, но это все только в HTML 5);
:out-of-range
 – когда не попадает в границы;
:required
 – все обязательные поля;
:optional 
– все необязательные;
:read-only
 – те элементы, которые доступны только для чтения;
:read-write
 – для чтения и записи.







----------------------------------------CSS СЕЛЕКТОРЫ сложные  ( они же всевдокласы)

ul li > span - Это изначает что мы обращаемся к дочернему элементу span элемента li

ul
	li + li
		background-color:#000    - ПЕРВЫЙ li НЕ ЗАКРАШИВАЕТЬСЯ а все остальные элементы li закрашиваються


.class ~ div  - ВЫБИРАЕМ ВСЕ div  после данного класса .class

.class ~ * - 		ВЫБЕРЕМ АБСОЛЮТнО ВСЕ ЭЛЕМЕнТЫ КОТОРЫЕ ИДУТ ПОСле .class

----ОБРАТИТЬСЯ К элементу по АТРИБУТУ или по Похожим словам в названиях классов
	(<div data-class="id-div")
	[data-class|=id]			(data-class ЭТО НАЗВАНИЕ АТРИБУТА блока - id это начало названия атрибута")
		background-color: dray   -  к этому элементу добавим фон
		
	[class^=yess]           - Выделем все блоки у которых название класса начинаеться на (yess)
		background-color: dray   -  к этому элементу добавим фон
		
	(<div class="classno")	
	[class$=no]             - Выделяем все блоки у которых название класса заканчиваеться на no
		background-color: dray   -  к этому элементу добавим фон

		
	(<div class="classeeeclass")	
	[class*=eee]			- Выделяет все классы у которых в середине названия найдеться eee
		background-color: dray   -  к этому элементу добавим фон
	
----ПРИМЕНИТЬ СТИЛИ к НАЖАТОМУ ЭЛЕМЕНТУ
	a:focus					- На все нажатые ссылки <a href=""> добавляеться фон
		background-color: dray   -  к этому элементу добавим фон
		
----ДОБАВИТЬ До или После БЛОКА
	div::after				- Добавляет элемент псле выбраного блока
		content: 'после добавили' - добавили слово после выбраного блока
	div::before
		content: 'перед добавили' - добавили слово перед выбранм блоком div

----Input СТИЛИ	
	(<input type="checkbox" name="name"/>)
	[checked]				- Когда поставили галочку на элементе checkbox он темнеет 
		opacity: .5
	или так
	input:checked
		opacity: .3
		
	(<input type="checkbox" name="name"/>)
	(<input type="text" name="name2" disabled />)
	input
		&:checked
			opacity: .3
		$:disabled				//применяем стиль к полю формы со значением disabled (неактивное)
			background-color:red
	
	input:enabled				- ПРИМЕНЯЕТЬСЯ КО ВСЕ инпутам у которых атрибут не disabled
		background-color:green 
		
	input:invalide				- Если пусты поля интупа то стили граници будут красные если что-то вести цвет пропадет
		border:2px solid red
		
	input:optional				- Стиль применяеться к полю формы если она не имеет атрибут required
		background-color:red
	
	(<input type="number" name="name1" max="10")
	input:out-of-range			- Стиль примениться если в поле введеться значение > 10 (потому как max мы указали 10)
		border:2px solid red
	
---Обращаемся к Пустым и НЕ Пустым элементам	 (Если мы внео что-то добавим он перестает быть пустым и стили отменяються)
	(<p></p>)
		p:empty					- ВЫБИРАЕМ ВСЕ <p> элементы которые ПУСТЫЕ
			background-color:red
			min-height:20px

		p:not(:empty)			- СТИЛИ применим ко всем не пустым элементам <p>
			background-color:red
			min-height:10px
			
		p:not(.class)			- ПРИМЕНИТЬСЯ ко все элементм p у которых нет КЛАССА
			background-color:red
			min-height:20px

--Обратиться к ПЕРВОМУ и ПОСЛЕДНЕМУ дочернему элементу блока
	p:first-child				- обращаемся к первому ДОЧЕРНЕМУ ЭЛЕМЕНТУ <p>
		background-color:red
		
    p:last-child				- обращаемся к последнему ДОЧЕРНЕМУ ЭЛЕМЕНТУ <p>
		background-color:red	

--Стили к  ЭЛЕМЕНТУ li по его номеру 
	(<ul><li></li><li>вот к этому применяться стили</li></ul>)
	li:nth-child(2)			--стили применяться к єлементу li второму по списку 
		background-color:red 
	
	li:nth-child(2n)			--стили применяться к КАЖДОМУ ВТОРОМУ ЭЛЕМЕНТУ
		background-color:red 
	
	li:nth-child(odd)			--стили применяться через ОДИН ЭЛЕМЕНТ СПИСКА начиная с первого (Удобно в использовании таблиц)
		background-color:red 
		
		
--Выбираем первую букву элемента и применяем к ней стили
	p::first-letter		-Применяем стиль к ПЕРВОЙ БУКВЕ предложения в элементе <p>
		font-size:200%
	
--Выпираем первую строку элемента и применяем к ней стили (НЕ ВЫЖноЙ КАКОГО РАЗМЕР СТРАНИЦА будет выбирать всегда 1 строку)
	p::first-line
		font-size:200%
		
--Выбираем ПЕРВЫЙ и ПОСЛЕДНЕМУ ЭЛЕМЕНТ ОПРЕДЕЛЕННОГО ТИПА
	p:first-of-type    - ПРИМЕНЯЕМ Стили к первому элементу элемента <p>
		font-size:200%
		
	p:last-of-type    - ПРИМЕНЯЕМ Стили к первому элементу элемента <p>
		font-size:200%
	
	div:nth-of-type(2n)
		background-color:red - ПРИМЕНЯЕМ СТИЛИ КО ВСеХ БЛОКАМ div КАЖДОМУ ВТОРОМУ
		
--Выбираем все БЛОКИ которые являються ДОЧЕРНИМИ
	div:only-child
		background-color:red
		
--Применение стилей через target (Если ссылка видет на какой-то ID то применить стили к этому id например)
	<a href="#target_1">Ссылка 1</a>
	<div id=target_1><div>
	
		div:target {	//по нажатию на ссылку к блоку div  применяться стили если на него перейдем по ссылке
			border:2px solid red;
		}
--Ссылки по которым уже использывали МЕНЯТЬ ИХ ЦВЕТ
	a:visited {
		color: green;
		}








----------------------------------------CSS спецификации селекторов  (ПРИАРИТЕТНОСТЬ СЕЛЕКТОРОВ)

	
Существует 4 правила по которым вычисляется специфичность селекторов:

1)	Самый высокий приоритет имеет атрибут style. Это правило перекрывает все селекторы описанные в стилях.

2)  Второе место занимает присутствие ID в селекторе(#some-id).

3)  Далее идут все атрибуты(в том числе и атрибут class) и псевдоклассы(pseudo-classes) в селекторе.

4)  Самый низкий приоритет у селекторов с именами элементов и псевдоэлементами(pseudo-elements).

	Все 4 правила сводятся в одну систему a-b-c-d(где а - наивысший приоритет) и образуют специфичность.
	
	
	У селектора STYLE  приаритет самый высокий
	Потом селектор ID - у ID приоритет выше чем у CLASS
	
	!important -  Если возникает противоречие, когда стиль автора страницы и пользователя для одного и того же элемента не совпадает, то !important позволяет повысить приоритет (специфичность) стиля или его важность, иными словами. 
	
	пример - .two { color:  red !important; } /* Добавляем !important */
	
	
	таблиц специфичности
	
	*              {} /* a=0 b=0 c=0 -> специфичность = 0   */
	li             {} /* a=0 b=0 c=1 -> специфичность = 1   */
	li:first-line  {} /* a=0 b=0 c=2 -> специфичность = 2   */
	ul li          {} /* a=0 b=0 c=2 -> специфичность = 2   */
	ul ol+li       {} /* a=0 b=0 c=3 -> специфичность = 3   */
	ul li.red      {} /* a=0 b=1 c=2 -> специфичность = 12  */
	li.red.level   {} /* a=0 b=2 c=1 -> специфичность = 21  */
	#t34           {} /* a=1 b=0 c=0 -> специфичность = 100 */
	#content #wrap {} /* a=2 b=0 c=0 -> специфичность = 200 */
	style=""							специфичность = 1000 */
	
	Но !important (приоритет 1000 помоему) перекрывает все стили и style тоже - элемент в таблице стилей с !important имеет самый высокий приоритет (специфичность)


-----------------------------------------------------------------

------------------------------------------------------------------




-----------------------@MEDIA

-----Применить 2 разных стиля на 2 разных разрешения экрана 

@media all and (orientation: landscape), all and (max-width: 960px) {
    .test{
        width:640px;
        margin: auto;
    }
}
@media all and (orientation: landscape), all and (min-width: 960px) {
    .test{
        width:960px;
        margin: auto;
    }
}
--------------------------------------------------------------------------------







Делает округлые клая элементу

border-bottom-left-radius:5px;
border-bottom-right-radius:5px;



-----------------------HTML теги и полезное
Верстка бывает БЛОЧНАЯ и ТАБЛИЧНАЯ

------ТЕГИ
--Одинарные теги
<br> - тег переноса
<hr/> - тег линии на экране
<img> = вставлять картинку
  - title ( текст при наведение мыши на него для поиска в поисковиках)
  - alt (необходим текст в случае если картинка не загружена вместо нее)
  -src (путь к нашей картинке)
  -width (ширина)
  -height (высота)
  <img src="image/Bike.JPG" width="370" height="250" alt="Текст в случае если картинка не загрузиться" title="Cycling">   //title нужно для раскрутки сайта когда наводим на картинку будет появляться название Тайтла


  
--Двойные теги
<p> - абзац <p align="Left">текст</p> перенос на лево
<b></b> - тег выделение текса жирным     / покупка <b>котят</b> - выделение этого слова в такой тег говорит что это слово будет использоваться поисковиках по нашему сайту

<strong> - выделяет участок жирным       / покупка <strong>котят</strong> -выделение этого слова в такой тег говорит что это слово будет использоваться поисковиках по нашему сайту
<i> - выделение текста курсивом
<em> - выделение текста курсивом         /  / покупка <em>котят</em> -выделение этого слова в такой тег говорит что это слово будет использоваться поисковиках по нашему сайту
<s> - зачеркнутый текст

<a> - ссылки
<label> - делает например вариант ответа кликабельным 

---------------
<body> - контент - содержание страници


<a href="new.html" target="_blank" >ссылка</a> -- сылка с открытием в новом окне ( target="_blank")
Бывает такое что по сылке по папкам файл находиться не в папке с файлом запуска сайта а например в предыдущей папке нам нада указать путь ../new folder/php.php например (.. возвращают нас на 1 папку назад)


<table> - создаем таблицу
<tr> - создаем строку
<td>- создаем ячейки
	-colspan (колонки, объединет ячейки по горизонтали) (<th colspan="4">Таблица юзеров</th>) - 4 количество ячеек
	-rowspan (строки, объединяет ячейки по вертикале) (<td rowspan="2">123<a href="/">link</a></td>)
<ul> - это контейнер в котором можно разместить список перечеслений <li> например 
<li> - тег маркер списки
		<ul type="circle">
			<li type="1" value="5">odin</li>
			<li>dva</li>
			<li>tri</li>
		</ul>
		-type - тип знака перечесления

<div> - БЛОКИ из которых состоит сайт - СТАРНДАРТНО ДИВ занимает всю ширину экрана - можно коректировать стилями в CSS
	-<div align="center"> - align место расположения блока

<th>- создает ячейку заголовка только надписи в ней жирным текстом
table => tr => td
	-border(1) - ширина граница таблици
	-cellpadding - отступы граница ячейки таблици и содержимым граници таблици(от рамки до контента)
	-cellspacing - отступы между ячейками таблици
	-bgcolor - задний фон таблици
	-valign - можно перемещать инфо ячейки верх или вниз
	-width - ширина ячейки или строчки ( колонки)
	-align - центрует (место размещение) таблицу
<span> - могает выделеть слово среди текста 
пример in<span class="newclass2">слово1</span>просто слова а потом<span class="newclass3">слово разукрашеное</span>

<b> - простое выделение жирным
<strong> - тег выделение жирным + помечаем ВАЖНЫМ

<label></label> - делает например вариант ответа в форме полностью кликабельным а не на точку наводить
	
	------------ФОРМЫ
ФОРМЫ тег <form> все что внутри содержание формы</form>	
Своя форма отправляет свои данные
В них будут различные поля и различные кнопки для отправки данных
  action - атрибут куда будет отправлять данные нашей формы  (например в указанный файл) если атрибут не указан значит форма будет отправляться в тот же файл в котором она написана
  method - 	$_POST или $_GET
 ----
 <?php                                          
echo 'print_r($_POST,1);
?>
<form action="" method="post">         //передаем логин и пароль
    <input type="hidden" name="hide" value="скрытое значение">   <!-- в скрытом поле можно писать скртые значения данных отправленных ниже (они будут отображаться в массиве POST или GET) -->
	<div>Заполнить логин: <input type="text" name="Login" value="Введите логин"></div>    <!-- value -можно не указывать (по умолчанию будет заполнять поле этим текстом) создадим поле для Логина в отдельном блоке для удобства -->
    <div>Заполнить пароль: <input type="password" name="pass" value="Введите пароль"></div> <!-- value - можно не указывать (заполняет ячейку данным текстом) -->
    <div><input type="submit" name="submit" value="Отправить данные" style="border:none"</div>  !-- предаем стили кнопке-->
</form>


 ----------- TYPE="radio"
<form>
<div>                 <!-- создаем поле с атрибутом radio(поле с вариантами выбора ) и name в этом поле используеться одинаковый (через общее имя RADIO между собой соединяються-->
        Пол:<br>
         <label>Мужчина<input type="radio" name="gender" value="M"></label> |   <!-- тег <label> делает наш вариант ответа кликабельным ( без него нужно попадать в кружочек выделения )
        <label>Женщина <input type="radio" name="gender" value="Ж"></label>
    </div>
    <div>
        Возраст:<br>
        до 18 <input type="radio" name="age" value="-18"> |
        от 18 <input type="radio" name="age" value="+18">
    </div>
    <div><input type="submit" name="submit" value="Отправить данные"</div>
</form>
-------------- TYPE="chackbox"
для выведения сразу нескольких вариантов ответа через checkbox используеться массив
(будет передаваться в метод POST или GET через кнопку массив внутри массива)
и м массив в дааном случае post передастья элемент like в котором будет массив 
с нашими всеми значениями которые мы выбрали.Что-бы вывести чек бокс на экран 
нада воспользоваться циклом foreach (для массивов)
ПРИМЕР
<?php
echo 'POST:<pre>'.print_r($_POST,1).'</pre>';
foreach($_POST['like'] as $v){
    echo ' '.$v;
}
?>
<form action="" method="post">
    <div>
        Любим:<br>
       <label>Киберспорт<input type="checkbox" name="like[]" value="Киберспорт"></label> |
        <label>Женщин <input type="checkbox" name="like[]" value="Женщин"></label> |
        <label>Кофе <input type="checkbox" name="like[]" value="Кофе"></label>
    </div>
    <div><input type="submit" name="submit" value="Отправить данные"</div>
</form>

  
---------Проверка на нажатие кнопки submit (аналогично делаеться регистрация)
<?php

if(isset($_POST['submit'])){       //isset проверяет если кнопка submit была нажата значит запускаеться условие нижу
    echo 'POST:<pre>'.print_r($_POST,1).'</pre>';
    foreach($_POST['like'] as $v){
        echo ' '.$v;
    }
    echo '<p>Форма была передана';
}
?>
<h1>Форма</h1>
<form action="" method="post">
    <div>
        Любим:<br>
       <label>Киберспорт<input type="checkbox" name="like[]" value="Киберспорт"></label> |
        <label>Женщин <input type="checkbox" name="like[]" value="Женщин"></label> |
        <label>Кофе <input type="checkbox" name="like[]" value="Кофе"></label>
    </div>
    <div><input type="submit" name="submit" value="Отправить данные"</div>
</form>
-------------
ПРИ Работе с формами еще очень удобно пользываться вот такой техникой 
использования  IF ELSE в условии формы - обратите внимание на 
закрытие фигурной скобки после условия ELSE

<?php
if(isset($_POST['login'],$_POST['pass'])){      //проверяем форму на существование логина и пароля ( на их отправку а потом начинаем работу)
              echo $_POST ['login'];      //выполняем авторизацию
} else {
?>
<h1>Форма</h1>
<form action="" method="post">
        <div>Заполнить логин: <input type="text" name="login" ></div>
        <div>Заполнить пароль: <input type="password" name="pass" ></div>
    <div><input type="submit" name="submit" value="Отправить данные"</div>
</form>
<?php } ?>
-------------------------





	--------------------CSS Управление стилями
	
	Обратиться из СSS файла к определеному тегу можно 3 видами
	 пример (<p class="abz" id="abz">Наш текст, который будет курсивом и жирный</p>)
	        (<p id="abz">Абзац с идентификатором</p>)
Как ссылаться к стилям ( 3 способа):	
	p{} - сылка на теги
		p{
		color:#900
		}]
	 
	
	.class {}- сылка на имена
	
	#id {}- сылка на идентификатор
	
	
	
	
	
	
Стили CSS------------
	left:0px -движение блока влево
	top:opx движение блока наверх

	padding - внутрений отступ (от рамки содержания)   | padding i margin (0 для убирание краниц)
	margin - внешний отступ (от рамки до других блоков)|
		пример центровки по всем 4-м направлениям (margin:5px 5px 5px 5px; или margin:0px auto; (это сверху прижат и по центру))
		-left
		-right
		-top
		-bottom
	width
	height
	font-size - размер шрифта
	text-decoration:underline;  - подчеркивание текста
	
	border - рамки которые ресуються вокруг таблици или объекта 
		-left
		-none (для картинок)
		-right
		-top
		-bottom
		-style
		-width
		-color
		-border-collapse: collapse; (это для того что-бы в таблице рамки не накладывались друг на друга)
		
	cursor: - это команда стиля делает меняющееся изображение мыши при наведении на объект ею
		-pointer - миш превратиться в палец например при наведении
		
	hover - делает например изменение фона класса или контейнера когда мы наводим на него мышкой 
	           например (.special_table th {
                                color: #261;
                                    }
                         .special_table th:hover {
                          background-color: red;)
		
		
	display - многофункциональный стиль 
		-inline - используеться для того что-бы формы были более красивые
		
		
		
		

		
		
__________ПРИМЕР ПОЗИЦИОНИРОВАНИЯ ( наложение одной картинки на другую)(наложение на картинку например знака с другой небольшой картинкой)

пример        		<div class="red">a</div>
					<div class="yallow">b
						<div class="p_l_b">Блок с левой стороны в низу</div>
						<div class="p_r_t">Блок с правой стороны вверху</div>
					</div>
					<div class="blue">c</div>
CSS кода 
                
				.red {
					background-color: red;
					height:50px;
				}
				.blue {
					background-color:blue;
					height:50px;
				}
				.yallow {
					background-color:yellow;
					height:400px;
					position:relative;
				}
				.p_l_b {
					position:absolute;
					left:0px;
					bottom:0px;
					background-color:#ff00ff;
					height:30px;
					width:300px;
				}
				.p_r_t {
					position:absolute;
					right:0px;
					top:0px;
					background-color:#ff00ff;
					height:30px;
					width:300px;
					z-index:1;    - если блок наложен на блок помогает определить какой обект сверху а какой снизу чем ниже число тем ниже находиться
				}

CSS для фона  fon  (это класс Div)
					.fon{
    background-image: url(Line.jpg);
    background-repeat: repeat;
    background-position: top left;
}

		
		
		
		-----------------------------------ПРИМЕР ЕСЛИ 2 БЛОКА Находяться в DIV (один блок имеет ширену 100px а второй должен занимать остальное пространство пустое))
												(поможет width: calc(100% - 100px))
		
		
<div style="width: 100%;position: relative;height: 500px;background-color: blueviolet;display: table">
    <div style="display: table-cell;position: relative; width: calc(100% - 100px);background-color: crimson;height: 100%">
        <p>11111111111</p>
    </div>
    <div style="display:table-cell;position: relative;width: 100px;height: 100%;background-color: black">
        <p>dssfdsf</p>
    </div>
</div>
		
		
		
		
		
		
		