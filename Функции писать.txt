	debug_backtrace(); - функция котрая дает всю инфо о функции ( для этого нада создать в нутри функцию переменную например $a = debug_backtrace(); и print_r $a внутри функции будет выведена инфо о функции)


Переменные которые созданы за функцией не видны в нутри функции (это область видимости переменных).
Сколько данных мы передаем в функцию столько данных мы и должны принимать (отправлять в функцию можно больше значений чем в ней создано новых переменных а меньше нельзя).
---------------------
-----Для того что-бы вывести одной переменной 2 значения из ФУнкЦИИ нужно поместить это значение в массив 
ПРимер
function bog (значение1=2, и значение2 = 2)
if ($x == 7){
$x = array(значение1 , значение2)
return $x;
}
$text = bog(7);
foreach ($text as $g);


---------------------------




------------ Создание ФУНКЦИЙ

--------------Создавание функции при условии
$x = 5;
if ($x == 5) {            //если $x равен 5 то запускаеться функция
	function test($x){
		echo ($x*2);
	}
}
test($x);





------------------Функция выводящая массив с тегоm <pre>

		function wtf($array, $stop = false){
			echo '<pre>'.print_r($array,1).'</pre>';
			if(!$stop){
				exit();
				}
			}
		wtf($array,1);
		wtf($array2,1);
		wft($array3); не выведеться потому что нет второго параметра


----------------


-------------Пример 1
<?php  
$var1 = 'Text $var1';
function count2($t1,$t2,$t3){  // в фуекции создали 3 переменных которые примут на себя значение 3-х передаваемых переменных
echo $t1.$t2.$t3;
}
count2($var1,'обычный текст', 12); //передаем 3 значение в функцию count2 значит нада внутри функции создать 3 переменых которые примут значение передаваемых переменных в функцию
?>
-------------Пример2

<?php
function hard($num1,$num2){
    $sun = ($num1*5+$num2*10)/2-1;
    $sun = 'Какой-то текст'.$sun;
    echo $sun;
}
hard(5,3);  //вызываем функцию и передаем в нее 2 значения 5 становиться в переменную num1 а 3 в num2 и выводиться ответ с подстановкой этих чисел
?>



----------Пример 3


<?php
function hard($num1,$num2){
    $sun = ($num1*5+$num2*10)/2-1;
    if ($sun <20){                      //добавили условие
    $sun = 'Какой-то текст'.$sun;
        echo $sun;
    } else {
        echo 'Слишком большое значение переменной';
    }
}
hard(5,3);  //вызываем функцию и передаем в нее 2 значения 5 становиться в переменную num1 а 3 в num2 и выводиться ответ с подстановкой этих чисел
?>


------- Пример 4   ФУНКЦЮ МОЖНО ВЫЗЫВАТЬ МНОГО РАЗ 

?php
function hard($num1,$num2){
    $sun = ($num1*5+$num2*10)/2-1;
    if ($sun <20){                      //добавили условие
    $sun = 'Какой-то текст'.$sun;
        echo $sun;
    } else {
        echo 'Слишком большое значение переменной';
    }
}
hard (1,1);  // передаем значение 1 и 1 в функцию ;
echo '<br>';
hard(5,3);  //вызываем функцию и передаем в нее 2 значения 5 становиться в переменную num1 а 3 в num2 и выводиться ответ с подстановкой этих чисел
?>


--------ФУНКЦИЯ ДЛЯ СОЗДАНИЯ ТАБЛИЦИ с разными отметками цвета полей (способ 1)

<?php
function makeTable($x, $y) {            //(это называеться значение по умолчанию) если мы будем вызывать нашу функцию без значений x и y например то нада будет написать так makeTable ($x=5,$y=5) например
    echo '<table border="1">';
    for($i=1;$i<=$y; $i++){
        echo '<tr>';
        for($i2=1;$i2<=$x;$i2++){
            $color = 'blue';
            if($i == 2 && $i2 == 2){
               $color = 'red';
            }elseif ($i == 5 || $i2 ==3){
                $color = 'green';
            }
            echo '<td style="background-color:'.$color.';">'.$i.':'.$i2.'</td>';
        }
        echo '</tr>';
    }
    echo '</table>';
    //return $text;                     //когда мы вызываем return все что ниже нее не будет работать
}
echo makeTable(5,10);                     //если мы вызовим функцию без значений makeTable(); то тогда сверху в функции нада обозначить x и y
echo '<br>';
echo makeTable(2,2);
?>
----------------------

----------Функция для создания таблици способ 2 используя Return

<?php
function makeTable($x, $y) {
    $text = '';
    $text.= '<table border="1">';
    for($i=1;$i<=$y; $i++){
        $text.= '<tr>';
        for($i2=1;$i2<=$x;$i2++){
            $color = 'blue';
            if($i == 2 && $i2 == 2){
               $color = 'red';
            }elseif ($i == 5 || $i2 ==3){
                $color = 'green';
            }
            $text.= '<td style="background-color:'.$color.';">'.$i.':'.$i2.'</td>';
        }
        $text.= '</tr>';
    }
    $text.= '</table>';
    return $text;
}
echo makeTable(5,10);
echo '<br>';
echo makeTable(2,2);
?>


-------------------------------
 Функции могут использовать в своей работе другие функции - например  (ПРОВЕРКИ НА РЕГИСТРАЦИЮ)
		function addToDB($login,$password) {
		      //добавление пользователя в общюю базу данных
		}
		function reg ($login,$password) {
		
		    if($login == 'Vasya')  {       //проверяем введенный нами логин не совпадает ли с логином базы
		    return false;                  // если $login приравниваеться значению Vasya значит такой логин уже есть и мі відаем false
		}
		addToDB($login,password);
		return true;                      //проверка что пароль и логин соотвецтвуют
		}
		
		if(reg('bogdan', '123')) {
		 echo 'Вы успешно зарегестрировались, поздравляем'!;
		} else {
			echo 'Вы не зарегистрировались';
		}

----------------------Функция которая делает ТЕКСТ
<?php
function texMake($text){
    $text = '++'.$text.'--';
    return $text;
}
$text='привет привет';
$text = texMake($text);
echo $text;
?>
 или если использовать знак склеивания & переменных за функцией то можно так 
 
 <?php
function texMake(&$text){
    $text = '++'.$text.'--';
}
$text='привет привет';
texMake($text);
echo $text;
?>




------------------ Фуекция которая отправляет запрос в MySQL и удобно выводит ошибку в случае появления ( и на почту ее отправляет или записать в файл)
	
	include_once ("./libs/config.php");
	$connect = mysqli_connect(DB,DBLOGIN,DBPASS,DBNAME);
	function q($connect, $query) {
	$res = mysqli_query($connect,$query);
	if($res === false) {   //если $res получает ошибку то делаем условие для вывода ошибки в удобной форме
		echo "Запрос: ".$query.'<br>'.mysqli_error($connect);
		//file_put_contents('./log/mysql.log',strip_tags($query)."\n\n",FILE_APPEND) - например можно еще записать ошибку в файл если она возникнет или отправить на почту
		$info = debug_backtrace();
		echo '<pre>';
		print_r($info);     //в случае ошибки єта переменная віведет всю инфо о нашей фугкции подробную откуда візвалась в какой строке и так далие с помошью debug_backtrace
		echo '</pre>';
		exit();
	} else {              //если все ок то возращает значение $res
		return $res;
		}
	}	
	$res = q($connect, "SELECT * FROM users WHERE id= '11' ORDER BY id");
	
	
	-------еще один вариант $connect можно помести во внутрь функции и сделать глобальной переменной
что-бы меньше ее вызывать смотри пример

    $connect = mysqli_connect(DB,DBLOGIN,DBPASS,DBNAME);
	function q($query) {
	global $connect;
	$res = mysqli_query($connect,$query);
	if($res === false) {   //если $res получает ошибку то делаем условие для вывода ошибки в удобной форме
		$info = debug_backtrace();
        $error =  "Запрос: ".$query.'<br>'.mysqli_error($connect).'<br>\n'. //красивы выводим текст ошибки  или сохраняем в файл с ошибками   
                   "file: ".$info[0]['file']."<br>\n".
                   "line: ".$info[0]['line']."<br>\n".
                   "date: ".date("Y-m-d H:i:s")."<br>\n".
                   "===================================" ;
		//file_put_contents('./log/mysql.log',strip_tags($error)."\n\n",FILE_APPEND) - например можно еще записать ошибку в файл если она возникнет или отправить на почту
		$info = debug_backtrace();
		echo '<pre>';
		print_r($error);     //в случае ошибки єта переменная віведет всю инфо о нашей фугкции подробную откуда візвалась в какой строке и так далие с помошью debug_backtrace
		echo '</pre>';
		exit();
	} else {              //если все ок то возращает значение $res
		return $res;
		}
	}	
	$res = q("SELECT * FROM users WHERE id= '11' ORDER BY id");	//теперь тут при вызове функции не надо писать $connect функция сама его туда подставляет в скобки (удобно)



	
--------------Функция для обработки многомерного массива функцией TRIM + еще функцию замкнем и сделаем РЕКУРСИЮ (замкнем цикл функции) тоесть (функция будет вызывать сама себя до тех пор)

   
			  $array = array (
			       'text',
				   '1',
				   '  1',
				   array(
				    'x'=>'11',
					'y'=>'   test',
				),
			);


                                         //     array_map (вданном случае берет части многомерного массива и прогоняет их снова черех функцию пока не дойдет до конца)- прогнать весь массив и обработать какими-то действиями
			function trimALL($el) {     //функция которая прогоняет весь массив через функцию TRIM
				if(!is_array($el)){	    //если не массив тогда обработаем
						$el = trim($el);    //$el - просто элемент
					} else {             // а если массив то запускаем снова нашу функцию и обрабатываем дальше массив внутри массива
						$el = array_map('trimALL',$el);
					}
					return $el;
			}
			
			$array = array_map('trimALL',$array); - прогоняет весь массив через функцию TRIM

			---- или код можно еще так написать 
			 
			function trimALL($el) {     
				if(!is_array($el)){	    
						$el = trim($el);    
					} else {            
						$el = array_map('trimALL',$el);
					}
					return $el;
			}
			
			$array = trimALL($array); 
			
			
			
			
	--------------- Функция кодировки используя Рендомные буквы и МD5 (КЭШИРОВАНИЕ)
	                
		function myHash($var) {
			$salt = 'ABC';
			$salt2 = 'CBA';
			$var = crypt(md5($var.$salt),$salt2);   //crypt работает с 2-мя аргументами $salt2 выступает в роли 2-го аргумента - ФУНКЦИЯ crypt создает защищеный пароль используя СОЛЬ (второй так называемый параметр)
			return $var;
		}


--------------------Функция убирает HTML и PHP теги 

			function clearData($el){ //убирает HTML и PHP тэги
				if(!is_array($el)){
					$el = strip_tags($el);
				}else{
					$el = array_map('clearData',$el);
				}
				return $el;
			}


------------------ Функция которая проверяет являеться ли переменная ЧИСЛОВ АБСОЛЮТНІМ ЧИСАЛО и убирает HTML PHP теги
( В результате если c $data передать "i" (тоесть число) получится либо 0 либо число > 0)
(Если с $data передать "s" будет строка то она обработает trim и strip_tags)

				function clearData($data, $type="s"){
					switch($type){
						case "s":
							$data = trim(strip_tags($data));break;
						case "i":
							$data = abs((int)$data);break;
					}
					return $data;
				}

				пример
				$id = clearData($_GET["del"],"i"); //передаем "i" то запуститься второе действие
				
				--------------Тоже самое с улучшеной обработкой 
				
				function clearData($data, $type="s"){ //в зафисимости от того с какой буквой будет получать $type таким значение и будет обрабатывать
						switch($type){         //нада если нада одной функцией обработать и string и int величину
							case "s":    //s string значение
								return mysql_real_escape_string(trim(strip_tags($data)));
							case "i":    //i integer
								return (int)$data;
						}
					} //пример использования $a = clearData($_POST["author"]) - не передаем $type потому как по умолчанию это string